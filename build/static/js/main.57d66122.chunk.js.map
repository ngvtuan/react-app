{"version":3,"sources":["containers/home/index.js","containers/downloadVideo/index.js","common/utils.js","App.js","serviceWorker.js","index.js"],"names":["HomePage","DownloadVideo","urlSearchParams","URLSearchParams","window","location","search","params","Object","fromEntries","entries","useState","videoSrc","setVideoSrc","ffmpeg","createFFmpeg","log","corePath","doTranscode","a","canvas","document","querySelectorAll","images","i","length","img","toDataURL","push","frameSpeed","load","fetchFile","FS","run","data","videoUrl","URL","createObjectURL","Blob","buffer","type","view","downloadLink","createElement","href","download","body","appendChild","click","removeChild","qrcode","val","str","chunkQuantity","numChunks","Math","ceil","chunks","Array","o","substr","splitStringIntoChunks","parseInt","className","src","controls","autoPlay","onClick","map","qr","idx","value","size","App","page","renderPage","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.57d66122.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function HomePage() {\r\n  return (\r\n    <div>Home page</div>\r\n  )\r\n}","import React, { useState } from 'react';\r\nimport { createFFmpeg, fetchFile } from '@ffmpeg/ffmpeg';\r\nimport QRCode from 'qrcode.react';\r\n\r\nimport { splitStringIntoChunks } from '../../common/utils'\r\n\r\nimport './styles.css';\r\n\r\nfunction DownloadVideo() {\r\n  const urlSearchParams = new URLSearchParams(window.location.search);\r\n  const params = Object.fromEntries(urlSearchParams.entries());\r\n\r\n  const [videoSrc, setVideoSrc] = useState('');\r\n  const ffmpeg = createFFmpeg({\r\n    log: true,\r\n    corePath: 'https://unpkg.com/@ffmpeg/core@0.10.0/dist/ffmpeg-core.js'\r\n  });\r\n\r\n  const doTranscode = async () => {\r\n    const canvas = document.querySelectorAll('.qrcode')\r\n    const images = []\r\n    for (let i = 0; i < canvas.length; i++) {\r\n      var img = canvas[i].toDataURL(\"image/png\");\r\n      images.push(img)\r\n    }\r\n    const frameSpeed = images.length * 32;\r\n\r\n    await ffmpeg.load();\r\n\r\n    for (let i = 0; i < images.length; i += 1) {\r\n      ffmpeg.FS('writeFile', `img00${i}.png`, await fetchFile(images[i]));\r\n    }\r\n\r\n    await ffmpeg.run('-framerate', '60', '-pattern_type', 'glob', '-i', '*.png', '-vf', `setpts=${frameSpeed}*PTS`, '-c:a', 'copy', '-shortest', '-c:v', 'libx264', '-pix_fmt', 'yuv420p', 'out.mp4');\r\n\r\n    const data = ffmpeg.FS('readFile', 'out.mp4');\r\n    for (let i = 0; i < images.length; i += 1) {\r\n      ffmpeg.FS('unlink', `img00${i}.png`);\r\n    }\r\n    const videoUrl = URL.createObjectURL(new Blob([data.buffer], { type: 'video/mp4' }));\r\n    setVideoSrc(videoUrl);\r\n\r\n    if (params?.view !== 'video') {\r\n      const downloadLink = document.createElement('a')\r\n      downloadLink.href = videoUrl\r\n      downloadLink.download = 'qrcode.mp4'\r\n      document.body.appendChild(downloadLink)\r\n      downloadLink.click()\r\n      document.body.removeChild(downloadLink)\r\n    }\r\n  };\r\n\r\n  let qrcode = []\r\n  if (params?.val) {\r\n    qrcode = splitStringIntoChunks(params.val, parseInt(params.chunks) || 1000)\r\n  }\r\n\r\n  const renderContent = () => {\r\n    if (params?.view === 'video') {\r\n      if (!videoSrc) {\r\n        <div>Loading...</div>\r\n      }\r\n\r\n      return (\r\n        <video src={videoSrc} controls autoPlay className=\"video\"></video>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <button onClick={doTranscode} className=\"btnDownload\">Download QR Code Video</button>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"download-video\">\r\n      {renderContent()}\r\n      <div className=\"qrcode-container\">\r\n        {qrcode?.map((qr, idx) => (\r\n          <QRCode value={qr} key={idx} size={1024} className=\"qrcode\" />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DownloadVideo;\r\n","export const splitStringIntoChunks = (str, chunkQuantity) => {\r\n  const numChunks = Math.ceil(str.length / chunkQuantity)\r\n  const chunks = new Array(numChunks)\r\n  for (let i = 0, o = 0; i < numChunks; ++i, o += chunkQuantity) {\r\n    chunks[i] = str.substr(o, chunkQuantity)\r\n  }\r\n\r\n  return chunks\r\n}","import React from 'react';\n\nimport HomePage from './containers/home';\nimport DownloadVideo from './containers/downloadVideo'\n\nimport './App.css';\n\nfunction App() {\n  const renderPage = () => {\n    const urlSearchParams = new URLSearchParams(window.location.search);\n    const params = Object.fromEntries(urlSearchParams.entries());\n\n    if (params) {\n      switch(params?.page) {\n        case 'download-video':\n          return <DownloadVideo />\n        default:\n          return <HomePage />\n      }\n    }\n\n    return <HomePage />\n  }\n\n  return (\n    <div className=\"App\">\n      {renderPage()}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}